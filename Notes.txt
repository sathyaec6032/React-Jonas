npm i json-server
"server": "json-server --watch data/cities.json --port 8000 --delay 500"



1. In React Native HTML elements only will get event handler functionality.

2. crypto.randomUUID() it is built in browser for generating ID's(but it won't work in older browsers).

3. Symbols can not be transmitted via JSON.

CSS Module
=========

Don't use normal element selector in css module, because it will affect overall element style.

How to change css module styles into global styles?

:global(.test)


<Link className={styles.cityItem} to={`/${id}`}>

If we start the ID with slash, it will go to the route url like http://localhost:3000/id



npm i redux-devtools-extension

import { composeWithDevTools } from "redux-devtools-extension";

const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));



Eslint Configuration
npm i eslint vite-plugin-eslint eslint-config-react-app --save-dev

vite.config.js
==============
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import eslint from "vite-plugin-eslint"

// https://vitejs.dev/config/
export default defineConfig({
plugins: [react(), eslint()],
})

.eslintrc.json
==============
{
"extends": "react-app"
}


<input
placeholder="Search order #"
value={query}
onChange={(e) => setQuery(e.target.value)}
className="w-28 rounded-full bg-yellow-100 px-4 py-2 text-sm transition-all duration-300 placeholder:text-stone-400 focus:w-72 focus:outline-none focus:ring focus:ring-yellow-500 focus:ring-opacity-50 sm:w-64"
/>



--c: no-repeat linear-gradient(theme(colors.stone.800) 0 0);

How to disable eslint errors?
//eslint-disable-next-line


Tailwind configuration example:
https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js


/** @type {import('tailwindcss').Config} */

//eslint-disable-next-line
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    fontFamily: {
      sans: 'Roboto Mono, monospace',
    },

    extend: {
     height: {
      screen: '100dvh'
     }
    },
  },
  plugins: [],
};


* Writing in the theme object will overwrite everything.
* Writing in the extend object will add new styles.